name: Release & Publish

on:
  push:
    tags:
      - 'v*.*.*'

env:
  PNPM_VERSION: '8'

jobs:
  # 发布前检查
  pre-release-check:
    name: Pre-release Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run full test suite
        run: |
          pnpm typecheck
          pnpm lint
          pnpm test:run
          pnpm build
          pnpm docs:build

      - name: Verify package.json version matches tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "❌ Tag version ($TAG_VERSION) doesn't match package.json version ($PACKAGE_VERSION)"
            exit 1
          fi
          echo "✅ Version check passed: $TAG_VERSION"

  # 构建发布包
  build-release:
    name: Build Release Package
    runs-on: ubuntu-latest
    needs: pre-release-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all formats
        run: pnpm build

      - name: Verify build outputs
        run: |
          echo "Checking build outputs..."
          ls -la es/
          ls -la lib/
          ls -la dist/
          ls -la types/

          echo "Checking package.json exports..."
          node -e "console.log(JSON.stringify(require('./package.json').exports, null, 2))"

      - name: Pack package
        run: pnpm pack

      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: npm-package
          path: '*.tgz'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-build
          path: |
            es/
            lib/
            dist/
            types/

  # 发布到 NPM
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: build-release
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-build

      - name: Publish to NPM
        run: pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify publication
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Verifying publication of $PACKAGE_NAME@$PACKAGE_VERSION"

          # Wait a bit for NPM to propagate
          sleep 30

          # Check if package is available
          npm view $PACKAGE_NAME@$PACKAGE_VERSION version || echo "Package not yet available on NPM"

  # 生成 Changelog 和 GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish-npm

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG=${GITHUB_REF#refs/tags/}

          echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"

          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)")
          fi

          # Save changelog to file
          echo "## Changes" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$CHANGELOG" >> CHANGELOG.md

          # Set output for next step
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download package artifact
        uses: actions/download-artifact@v3
        with:
          name: npm-package

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: '*.tgz'
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 更新文档
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and deploy docs
        run: pnpm docs:build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/.vitepress/dist
          cname: ldesign-store.netlify.app

  # 发布通知
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [publish-npm, create-release, update-docs]
    if: always()

    steps:
      - name: Notify success
        if: ${{ needs.publish-npm.result == 'success' && needs.create-release.result == 'success' }}
        run: |
          echo "🎉 Release ${{ github.ref_name }} published successfully!"
          echo "📦 NPM: https://www.npmjs.com/package/@ldesign/store"
          echo "📖 Docs: https://ldesign-store.netlify.app"
          echo "🏷️ Release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"

      - name: Notify failure
        if: ${{ needs.publish-npm.result == 'failure' || needs.create-release.result == 'failure' }}
        run: |
          echo "❌ Release ${{ github.ref_name }} failed!"
          exit 1
